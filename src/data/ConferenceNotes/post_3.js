const post_3 = {
  id: "post3",
  title: "07/08 [컨퍼런스] 토스 SLASH23 - toss가 wed에서 React Native로 바꿔야만 했던 이유 (2편)",
  date: "2023/07/08",
  content: `
SLASH 컨퍼런스에서 발표된 내용을 정리해본 글입니다. 토스는 여러 개의 서비스를 독립적으로 운영하고 있고, 각 서비스가 따로 빌드되고 배포되는 구조를 가지고 있다. 이런 구조 속에서 React Native를 도입하면서 어떤 어려움이 있었고, 어떻게 해결했는지를 중심으로 다뤄졌다.

특히, React Native의 JS 파일 용량이 서비스당 약 3MB 정도 되는데, iOS(150MB)와 Android(100MB)의 앱 다운로드 제한을 고려했을 때 번들 최적화는 필수였다. 이 문제를 해결하기 위해 어떤 전략을 썼는지 인상 깊었다.

### 문제 해결: JS 파일 분리와 최적화

토스에서는 JS 파일을 크게 두 가지 범주로 나눠서 관리하고 있다고 합니다: **Shared**와 **Service**.

- Shared: React, React Native 같은 공통 라이브러리들을 모아둔 영역이다. 모든 서비스에서 공통으로 쓰이는 것들이라, 한 번만 로드되도록 구성했다고 함.
- Service: 각 서비스 전용으로 필요한 모듈들만 따로 모은 영역이다. 이렇게 분리함으로써 서비스별로 불필요한 코드 로딩 없이 최적화된 구성이 가능했다고 함.

이 구조 덕분에 필요한 모듈만 로드하게 되어, 전체적으로 성능 개선에 큰 도움이 됐다고 함.

### 왜 JS 번들 최적화가 중요한가?
발표에서는 JS 파일이 클수록 클라이언트 측에서의 파싱, 컴파일, 실행 시간도 늘어나 사용자 경험에 영향을 줄 수 있다고 강조함. 그래서 JS 번들 최적화는 단순한 성능 이슈가 아니라, 실제 사용자 UX와 직결된 문제라는 점이 와닿았다.

### Chunks 구조로 JS 파일 세분화
토스에서는 JS 파일을 Chunk 단위로 나누어서, 필요한 코드만 로드할 수 있게 했다. 아래는 발표에서 설명한 주요 Chunk 유형들:

- **Framework Chunk:** React, Next.js 같은 프레임워크 기반 코드. 거의 변하지 않고, 캐싱되어 빠르게 로드됩니다.
- **Commons Chunk:** 전체 페이지에서 공통으로 쓰이는 코드들을 모아둔 영역입니다.
- **Shared Chunk:** 두 개 이상의 페이지에서 쓰이는 코드들. 중복 로드를 줄이고 재사용성을 높이는 구조예요.
- **Page-Specific Chunk:** 특정 페이지에서만 사용하는 코드. 다른 페이지에서는 불필요하게 로드되지 않게끔 구성되어 있습니다.

### 파일 분리를 위한 주요 기법
1. **Code Splitting:** 기능 단위로 JS 코드를 나누어 필요한 시점에만 로드되도록 설정
2. **Lazy Loading:** 사용자가 특정 기능에 접근할 때 해당 리소스를 로드해 초기 로딩 성능 개선
3. **Tree Shaking:** 사용되지 않는 코드를 제거하여 전체 번들 크기를 줄이는 최적화 기법

### 정리하며
React Native 도입 과정에서 토스가 어떤 고민을 했고, 어떻게 구조를 최적화했는지 잘 정리된 발표였다. 특히 JS 파일을 효과적으로 분리하고 로딩 구조를 설계한 방식이 인상 깊었다.

참고 링크: [SLASH21 영상 보기](https://www.youtube.com/watch?v=EP7g5R-7zwM&t=584s)
`};

export default post_3;

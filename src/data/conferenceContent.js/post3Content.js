const post3Content = `
  <h3>토스가 wed에서 React Native로 바꿔야만 했던 이유 (2편)</h3>
  <p>토스는 다양한 서비스가 존재하며, 각각의 서비스가 독립적으로 배포 및 빌드되는 구조입니다. 이러한 이유로 React Native를 사용하는 경우에도 동일하게 각 서비스별로 배포 및 빌드를 관리해야 한다는 점에서 큰 도전이 있었습니다.</p>
  <p>React Native는 서비스당 약 3MB의 JS 파일 크기를 가지고 있어, iOS 및 APK의 데이터 다운로드 제한(각각 150MB와 100MB)을 고려했을 때 용량 최적화가 필수적이었습니다. 따라서, 이를 해결하기 위해 토스는 다양한 방안을 모색했습니다.</p>

  <h3>문제 해결: JS 파일의 세분화와 최적화</h3>
  <p>토스는 각 서비스의 JS 파일을 두 개의 주요 범주로 분리하여 관리합니다: <strong>Shared</strong>와 <strong>Service</strong>입니다.</p>
  <ul>
    <li><strong>Shared:</strong> 모든 서비스에서 공통적으로 사용되는 라이브러리(예: React, React Native 등)를 포함하여 공통 모듈로 관리합니다. 이러한 접근은 모든 서비스가 공통적으로 필요로 하는 모듈을 한 번만 로드함으로써 네트워크 비용을 줄이고 로딩 속도를 향상시키는 효과를 얻을 수 있습니다.</li>
    <li><strong>Service:</strong> 개별 서비스에서만 필요한 모듈과 코드를 포함합니다. 이렇게 분리함으로써 서비스별로 독립적인 배포와 관리를 할 수 있으며, 불필요한 코드가 로드되지 않도록 최적화합니다.</li>
  </ul>
  <p>각 서비스가 로드될 때, 필요한 라이브러리는 이 <code>Shared</code>와 <code>Service</code>에서 적절하게 가져오도록 설정하여 효율적인 데이터 관리와 빠른 응답 속도를 보장합니다.</p>

  <h3>번들 사이즈 최적화의 중요성</h3>
  <p>JS 파일은 클라이언트 측에서 다운로드된 후, 파싱, 컴파일, 실행의 단계를 거칩니다. 파일 크기가 클수록 이 과정에 더 많은 시간이 소요되며, 사용자 경험이 저하될 수 있습니다. 이 때문에 JS 번들 최적화는 필수적이며, 이를 위해 번들 파일을 효율적으로 분리하고 불필요한 파일을 줄이는 것이 중요합니다.</p>

  <h3>Chunks: JS 파일의 구조화</h3>
  <p>토스는 번들 파일을 세분화하여 페이지별로 필요한 코드만 로드될 수 있도록 설정했습니다. 이를 통해 네트워크 비용과 처리 비용을 줄이고, 로딩 속도를 개선할 수 있었습니다.</p>
  <ul>
    <li><strong>Framework Chunk:</strong> React, React-dom, Next 등 모든 페이지에서 공통으로 사용되는 프레임워크와 라이브러리들을 포함합니다. 이 Chunk는 대부분 변화가 없으며, 초기 로드 이후에는 캐싱되어 빠르게 로드됩니다.</li>
    <li><strong>Commons Chunk:</strong> 모든 페이지에서 공통적으로 사용하는 코드와 모듈이 포함됩니다. 이 Chunk를 통해 중복되는 모듈을 한 번만 로드하도록 하여 네트워크 비용을 최소화합니다.</li>
    <li><strong>Shared Chunk:</strong> 두 개 이상의 페이지에서 사용되는 코드가 포함됩니다. 이를 통해 서비스 간의 공통 코드가 재사용되며, 로딩 속도를 개선할 수 있습니다.</li>
    <li><strong>Page-Specific Chunk:</strong> 각 페이지에 특화된 코드가 포함됩니다. 예를 들어, 특정 서비스 페이지에서만 필요한 로직이나 모듈이 이 Chunk에 포함되어, 다른 페이지에서는 불필요하게 로드되지 않도록 최적화됩니다.</li>
  </ul>

  <h3>파일 분리의 구체적인 방법</h3>
  <p>토스는 번들 파일의 구조를 최적화하기 위해 다음과 같은 접근 방식을 사용했습니다:</p>
  <ol>
    <li><strong>Code Splitting:</strong> 각 페이지와 기능별로 JS 코드를 나눠서 필요한 부분만 로드하는 방식입니다. 이를 통해 초기 로딩 시간을 줄이고, 사용자가 특정 페이지에 도달할 때만 해당 페이지의 JS 코드가 로드되도록 설정합니다.</li>
    <li><strong>Lazy Loading:</strong> 사용자가 페이지를 탐색할 때 필요한 리소스를 그때그때 로드하여 초기 로딩 성능을 개선합니다. 이를 통해 사용자가 처음 앱을 접할 때의 지연을 최소화할 수 있습니다.</li>
    <li><strong>Tree Shaking:</strong> 사용되지 않는 코드를 번들에서 제거하여 파일 크기를 줄이는 기술입니다. 불필요한 모듈이나 함수를 번들에서 제외함으로써 최적화 효과를 얻습니다.</li>
  </ol>

  <h3>결론 및 다음 단계</h3>
  <p>이러한 최적화 기술을 통해 토스는 React Native로의 전환에서 발생하는 문제를 효과적으로 해결할 수 있었습니다. 특히, JS 파일의 크기를 효율적으로 줄임으로써 다운로드 및 로드 시간을 줄였으며, 이를 통해 더 나은 사용자 경험을 제공할 수 있었습니다.</p>
  <p>이후의 작업에서는 번들러 설정의 세부 사항과 추가적인 최적화 기법에 대해 다루고, 그동안의 경험을 바탕으로 한 문제 해결 사례를 공유할 예정입니다.</p>
  <p>더 자세한 내용은 SLASH23 컨퍼런스 영상과 SLASH21 영상을 통해 확인할 수 있습니다. </br>
  참고 링크: <a href="https://www.youtube.com/watch?v=EP7g5R-7zwM&t=584s" target="_blank">SLASH21 영상 보기</a></p>
`;

export default post3Content;
